syntax = "proto3";
package v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option(grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "ToDo service";
        version: "1.0";
        contact: {
            name: "golang todo list api example";
            url: "https://github.com/maxsuelmarinho/golang-todo-list-api-example";
            email: "mymail@email.com";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
        key: "404";
        value: {
            description: "Returned when the resource does not exist.";
            schema: {
                json_schema: {
                    type: STRING;
                }
            }
        }
    }
};

message ToDo {
    int64 id = 1;
    
    // Title of the task
    string title = 2;

    string description = 3;

    // Date and time to remind the todo task
    google.protobuf.Timestamp reminder = 4;
}

message CreateRequest {
    // API versioning
    string api = 1;

    // Task entity to add
    ToDo toDo = 2;
}

message CreateResponse {
    string api = 1;

    // ID of created task
    int64 id = 2;
}

message ReadRequest {
    string api = 1;

    // Task's ID
    int64 id = 2;
}

message ReadResponse {
    string api = 1;

    ToDo toDo = 2;
}

message UpdateRequest {
    string api = 1;

    ToDo toDo = 2;
}

message UpdateResponse {
    string api = 1;

    // Contains number of entities have been updated
    // Equals 1 in case of successfull update
    int64 updated = 2;
}

message DeleteRequest {
    string api = 1;

    // Task's ID to be deleted
    int64 id = 2;
}

message DeleteResponse {
    string api = 1;

    // Equals 1 in case of successful delete
    int64 deleted = 2;
}

message ReadAllRequest {
    string api = 1;
}

message ReadAllResponse {
    string api = 1;

    // List of all todo tasks
    repeated ToDo toDos = 2;
}

service ToDoService {
    rpc Create(CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/v1/todo"
            body: "*"
        };
    }

    rpc Read(ReadRequest) returns (ReadResponse) {
        option (google.api.http) = {
            get: "/v1/todo/{id}"
        };
    }

    rpc Update(UpdateRequest) returns (UpdateResponse) {
        option (google.api.http) = {
            put: "/v1/todo/{toDo.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/todo/{toDo.id}"
                body: "*"
            }
        };
    }

    rpc Delete(DeleteRequest) returns (DeleteResponse) {
        option (google.api.http) = {
            delete: "/v1/todo/{id}"
        };
    }

    rpc ReadAll(ReadAllRequest) returns (ReadAllResponse) {
        option (google.api.http) = {
            get: "/v1/todo/all"
        };
    }
}